{"ast":null,"code":"import _classCallCheck from \"D:\\\\work\\\\git\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\work\\\\git\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\work\\\\git\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"D:\\\\work\\\\git\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\work\\\\git\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\work\\\\git\\\\react\\\\src\\\\Counter\\\\Counter.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Auxiliary from \"../hoc/Auxiliary\";\nimport Counter2 from '.. /';\n\nvar Counter = /*#__PURE__*/function (_Component) {\n  _inherits(Counter, _Component);\n\n  var _super = _createSuper(Counter);\n\n  function Counter() {\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      counter: 0\n    };\n\n    _this.addCounter = function () {\n      // setState - ассинхронный, поэтому если будет меняться параллельно, может быть ошибка\n      // this.setState({\n      //   counter: this.state.counter + 1\n      // })\n      // способ работы со 100% предыдущим стейтом, который не может быть изменен асинхронно\n      _this.setState(function (prevState) {\n        return {\n          counter: prevState.counter + 1\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // с оберткой:\n      // return (\n      //   <div>\n      //     <h2>Counter: {this.state.counter} </h2>\n      //     <button onClick={this.addCounter}>+</button>\n      //     <button\n      //       style={{marginBottom: '20px'}}\n      //       onClick={() => this.setState({counter: this.state.counter - 1})}>-</button>\n      //   </div>\n      // )\n      // без обертки: как массив тегов - но нужен key\n      // return [\n      //   <h2 key={1}>Counter: {this.state.counter} </h2>,\n      //   <button key={2}\n      //           onClick={this.addCounter}>+</button>,\n      //   <button key={3}\n      //     style={{marginBottom: '20px'}}\n      //     onClick={() => this.setState({counter: this.state.counter - 1})}>-</button>\n      // ]\n      // без обертки через Fragment\n      // return (\n      //   <React.Fragment> // или <>\n      //     <h2>Counter: {this.state.counter} </h2>\n      //     <button onClick={this.addCounter}>+</button>\n      //     <button\n      //       style={{marginBottom: '20px'}}\n      //       onClick={() => this.setState({counter: this.state.counter - 1})}>-</button>\n      //   </React.Fragment>\n      // )\n      // без обертки через собственный компонент высшего порядка\n      return /*#__PURE__*/React.createElement(Auxiliary, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }, \"Counter: \", this.state.counter, \" \"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.addCounter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, \"+\"), /*#__PURE__*/React.createElement(\"button\", {\n        style: {\n          marginBottom: '20px'\n        },\n        onClick: function onClick() {\n          return _this2.setState({\n            counter: _this2.state.counter - 1\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      }, \"-\"));\n    }\n  }]);\n\n  return Counter;\n}(Component);\n\nexport { Counter as default };","map":{"version":3,"sources":["D:/work/git/react/src/Counter/Counter.js"],"names":["React","Component","Auxiliary","Counter2","Counter","state","counter","addCounter","setState","prevState","marginBottom"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,QAAP,MAAqB,MAArB;;IAEqBC,O;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE;AADH,K;;UAIRC,U,GAAa,YAAM;AACjB;AACA;AACA;AACA;AAEA;AACA,YAAKC,QAAL,CAAc,UAACC,SAAD,EAAe;AAC3B,eAAO;AACLH,UAAAA,OAAO,EAAEG,SAAS,CAACH,OAAV,GAAoB;AADxB,SAAP;AAGD,OAJD;AAKD,K;;;;;;;WAED,kBAAS;AAAA;;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,0BACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAc,KAAKD,KAAL,CAAWC,OAAzB,MADF,eAEE;AAAQ,QAAA,OAAO,EAAE,KAAKC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE;AACE,QAAA,KAAK,EAAE;AAACG,UAAAA,YAAY,EAAE;AAAf,SADT;AAEE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACF,QAAL,CAAc;AAACF,YAAAA,OAAO,EAAE,MAAI,CAACD,KAAL,CAAWC,OAAX,GAAqB;AAA/B,WAAd,CAAN;AAAA,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,CADF;AASD;;;;EA9DkCL,S;;SAAhBG,O","sourcesContent":["import React, {Component} from \"react\";\r\nimport Auxiliary from \"../hoc/Auxiliary\";\r\nimport Counter2 from '.. /'\r\n\r\nexport default class Counter extends Component {\r\n  state = {\r\n    counter: 0\r\n  }\r\n\r\n  addCounter = () => {\r\n    // setState - ассинхронный, поэтому если будет меняться параллельно, может быть ошибка\r\n    // this.setState({\r\n    //   counter: this.state.counter + 1\r\n    // })\r\n\r\n    // способ работы со 100% предыдущим стейтом, который не может быть изменен асинхронно\r\n    this.setState((prevState) => {\r\n      return {\r\n        counter: prevState.counter + 1\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    // с оберткой:\r\n    // return (\r\n    //   <div>\r\n    //     <h2>Counter: {this.state.counter} </h2>\r\n    //     <button onClick={this.addCounter}>+</button>\r\n    //     <button\r\n    //       style={{marginBottom: '20px'}}\r\n    //       onClick={() => this.setState({counter: this.state.counter - 1})}>-</button>\r\n    //   </div>\r\n    // )\r\n\r\n    // без обертки: как массив тегов - но нужен key\r\n    // return [\r\n    //   <h2 key={1}>Counter: {this.state.counter} </h2>,\r\n    //   <button key={2}\r\n    //           onClick={this.addCounter}>+</button>,\r\n    //   <button key={3}\r\n    //     style={{marginBottom: '20px'}}\r\n    //     onClick={() => this.setState({counter: this.state.counter - 1})}>-</button>\r\n    // ]\r\n\r\n    // без обертки через Fragment\r\n    // return (\r\n    //   <React.Fragment> // или <>\r\n    //     <h2>Counter: {this.state.counter} </h2>\r\n    //     <button onClick={this.addCounter}>+</button>\r\n    //     <button\r\n    //       style={{marginBottom: '20px'}}\r\n    //       onClick={() => this.setState({counter: this.state.counter - 1})}>-</button>\r\n    //   </React.Fragment>\r\n    // )\r\n\r\n    // без обертки через собственный компонент высшего порядка\r\n    return (\r\n      <Auxiliary>\r\n        <h2>Counter: {this.state.counter} </h2>\r\n        <button onClick={this.addCounter}>+</button>\r\n        <button\r\n          style={{marginBottom: '20px'}}\r\n          onClick={() => this.setState({counter: this.state.counter - 1})}>-</button>\r\n      </Auxiliary>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}