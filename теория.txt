==================================
СПОСОБЫ СОЗДАНИЯ КОМПОНЕНТА (ВИДЫ)
==================================

1. Классовый
class Car extends React.Component / class Car extends Component
- наследуются от класса, занимают больше памяти
- имеют функции render и остальные этапы жизненного цикла

2. Функциональный
const Car = (props) => {}
- занимают меньше места, поэтому предпочтительнее
- тело функции = содержимое render() для класса


===================================
ЖИЗНЕННЫЙ ЦИКЛ КОМПОНЕНТА: БАЗОВЫЙ
===================================
- актуально для компонентов, которые наследуются от 'Component'

0. вызывается конструктор - если есть - это относится не к реакту, а к js-классу
1. UNSAFE_componentWillMount*() - компонент  готов к рендеру, проинициализирован
2. render() - компонент рендерится
3. componentDidMount() - компонент отрендерился, html готов

--mount = render - что-то положено в dom

!!!

componentWillMount
componentWillReceiveProps
componentWillUpdate

помечены  префиксом 'UNSAFE_' - в дальнейших версиях реакта могут возникнуть баги с ними


===========================================
ЖИЗНЕННЫЙ ЦИКЛ КОМПОНЕНТА: ПОСЛЕ ОБНОВЛЕНИЯ
===========================================

1. componentWillReceiveProps(nextProps) - получаем новые параметры для компонента
нужен чтобы синхронизировать локальный стейт (если есть) с входящими свойствами
редко используется

2. shouldComponentUpdate(nextProps, nextState) - возвращает true или false
true говорит что компонент должен измениться, и мы должны его перерисовать
но если false - можно не перерисовывать, соответственно не делать трудоемкий процесс - хорошо для оптимизации

например, если пробел не считается изменением свойства:
return nextProps.name.trim() !== this.props.name.trim()

3. UNSAFE_componentWillUpdate(nextProps, nextState) - тут уже знаем, что компонент будет изменен, и готовимся к изменению

4. render()

5. componentDidUpdate()